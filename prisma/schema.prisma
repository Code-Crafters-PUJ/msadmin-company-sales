// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id          Int     @id @default(autoincrement())
  companyName String
  contactName String
  email       String  @unique
  telephone   String
  nit         Int     @unique
  status      Boolean @default(true)

  billings Billing[]
  coupons  Coupon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index(email)
  @@index(nit)
}

model Coupon {
  code           String   @id
  duration       DateTime @db.Time()
  discount       Int
  expirationDate DateTime
  status         Boolean  @default(true)
  clientId       Int

  client Client @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Billing {
  id          Int      @id @default(autoincrement())
  initialDate DateTime
  finalDate   DateTime
  paymentDate DateTime
  amount      Float
  status      Boolean  @default(true)
  clientId    Int
  planId      Int
  paymentId   Int

  client  Client  @relation(fields: [clientId], references: [id])
  plan    Plan    @relation(fields: [planId], references: [id])
  payment Payment @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Payment {
  id     Int    @id @default(autoincrement())
  method String @unique

  billings Billing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Plan {
  id          Int     @id @default(autoincrement())
  type        String
  description String
  price       Float
  duration    Int
  accounts    Int
  status      Boolean @default(true)

  billings Billing[]
  services PlanHasService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([type, duration], name: "type_duration")
}

model Service {
  id     Int     @id @default(autoincrement())
  name   String
  status Boolean @default(true)
  users  Int

  plans PlanHasService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PlanHasService {
  planId    Int
  serviceId Int

  plan    Plan    @relation(fields: [planId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([planId, serviceId])
}
